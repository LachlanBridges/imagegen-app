This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.eslintrc.cjs
.gitignore
components.json
index.html
LICENSE
package.json
postcss.config.js
public/vite.svg
README.md
src/App copy.tsx
src/App.tsx
src/assets/react.svg
src/components/HistoryCard.tsx
src/components/ImageViewer.tsx
src/components/ui/button.tsx
src/index.css
src/lib/estimateCost.ts
src/lib/utils.ts
src/main.tsx
src/pages/GeneratePage.tsx
src/pages/HistoryPage.tsx
src/vite-env.d.ts
tailwind.config.js
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: .eslintrc.cjs
================
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended",
  ],
  ignorePatterns: ["dist", ".eslintrc.cjs", "tailwind.config.js"],
  parser: "@typescript-eslint/parser",
  plugins: ["react-refresh"],
  rules: {
    "react-refresh/only-export-components": ["warn", { allowConstantExport: true }],
  },
};

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.vscode

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

================
File: index.html
================
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image/svg+xml" href="/vite.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Vite + React + TS + Shadcn-ui</title>
  <script async src="https://umami.moinulmoin.com/script.js"
    data-website-id="4b33d804-29a8-4325-95bb-fc64ebdcf0ff"></script>
</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.tsx"></script>
</body>

</html>

================
File: LICENSE
================
MIT License

Copyright (c) 2023 Moinul Moin

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: package.json
================
{
  "name": "vite-react-tailwind-starter",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-slot": "^1.0.2",
    "axios": "^1.8.4",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.378.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.5.1",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20.12.8",
    "@types/react": "^18.3.1",
    "@types/react-dom": "^18.3.0",
    "@typescript-eslint/eslint-plugin": "^7.8.0",
    "@typescript-eslint/parser": "^7.8.0",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.57.0",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.6",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.3",
    "typescript": "^5.4.5",
    "vite": "^5.2.11"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + TypeScript + Vite + Tailwind

This template provides a minimal setup to get React working in Vite, TypeScript, and Tailwind.

## Getting Started 🚀

1. Clone the repo.
2. Install dependencies: `pnpm install`
3. Start the dev server: `pnpm dev`

### Or

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fmoinulmoin%2Fvite-react-tailwind-starter)

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
   parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
    project: ['./tsconfig.json', './tsconfig.node.json'],
    tsconfigRootDir: __dirname,
   },
```

- Replace `plugin:@typescript-eslint/recommended` to `plugin:@typescript-eslint/recommended-type-checked` or `plugin:@typescript-eslint/strict-type-checked`
- Optionally add `plugin:@typescript-eslint/stylistic-type-checked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and add `plugin:react/recommended` & `plugin:react/jsx-runtime` to the `extends` list

## License 📄

[MIT License](https://github.com/moinulmoin/vite-react-tailwind-starter/blob/master/LICENSE)

================
File: src/App copy.tsx
================
import axios from 'axios'
import { useEffect, useState } from 'react'

const FORMATS = ['png', 'jpeg', 'webp']
const SIZES = ['1024x1024', '1536x1024', '1024x1536']
const BACKGROUNDS = ['auto', 'transparent', 'opaque']
const QUALITIES = ['auto', 'low', 'medium', 'high']
const MODERATIONS = ['auto', 'low']
const COUNTS = [1, 2, 3, 4, 5]

function estimateCost({
    size,
    quality,
    n,
  }: {
    size: string
    quality: string
    n: number
  }): number {
    const baseCosts: Record<string, number> = {
      low: 0.02,
      medium: 0.07,
      high: 0.19,
      auto: 0.07,
    }
  
    const sizeMultiplier =
      size === '1536x1024' || size === '1024x1536' ? 1.5 : 1.0
  
    const costPerImage = baseCosts[quality] || 0.07
  
    return costPerImage * sizeMultiplier * n
  }

type GeneratedImage = {
  b64: string
  prompt: string
}

function App() {
  const [prompt, setPrompt] = useState('')
  const [format, setFormat] = useState('png')
  const [size, setSize] = useState('1024x1024')
  const [background, setBackground] = useState('auto')
  const [quality, setQuality] = useState('auto')
  const [moderation, setModeration] = useState('auto')
  const [count, setCount] = useState(1)
  const [imageFiles, setImageFiles] = useState<File[]>([])
  const [images, setImages] = useState<GeneratedImage[]>([])
  const [loading, setLoading] = useState(false)
  const [currentIndex, setCurrentIndex] = useState(0)
  const [locked, setLocked] = useState(false)
  const [history, setHistory] = useState<any[]>([])


  useEffect(() => {
    axios.get('/api/history?user=lachlan').then((res) => {
      setHistory(res.data.reverse()) // show newest first
    })
  }, [])
  
  
  const handleFilesChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newFiles = Array.from(e.target.files || [])
    setImageFiles((prev) => [...prev, ...newFiles])
    e.target.value = ''
  }

  const removeFile = (index: number) => {
    setImageFiles((prev) => prev.filter((_, i) => i !== index))
  }

  const reset = () => {
    setPrompt('')
    setImages([])
    setImageFiles([])
    setCurrentIndex(0)
    setLocked(false)
  }

  const generate = async () => {
    setLoading(true)
    setImages([])

    try {
        let newImages: GeneratedImage[] = []

        if (imageFiles.length > 0) {
        const formData = new FormData()
        formData.append('prompt', prompt)
        formData.append('size', size)
        formData.append('quality', quality)
        formData.append('n', String(count))
        formData.append('moderation', moderation)
        imageFiles.forEach((file) => {
            formData.append('images', file)
        })

        const res = await axios.post('/api/edit', formData, {
            headers: { 'Content-Type': 'multipart/form-data' },
        })

        newImages = res.data.data.map((d: any) => ({
            b64: `data:image/png;base64,${d.b64_json}`,
            prompt,
        }))
        } else {
        const res = await axios.post('/api/generate', {
            prompt,
            model: 'gpt-image-1',
            size,
            output_format: format,
            background,
            quality,
            moderation,
            n: count,
        })

        newImages = res.data.data.map((d: any) => ({
            b64: `data:image/${format};base64,${d.b64_json}`,
            prompt,
        }))
        }

        // Save locally
        setImages(newImages)
        setCurrentIndex(0)
        setLocked(true)

        // Save to history
        await axios.post('/api/history', {
        user: 'lachlan',
        prompt,
        settings: {
            size,
            quality,
            format,
            background,
            moderation,
            count,
        },
        images: newImages.map((img) => img.b64),
        })
    } catch (err) {
        console.error('[Image Generation Error]', err)
        alert('Image generation failed')
    }

    setLoading(false)
    }


  return (
    <div className="max-w-xl mx-auto p-4 space-y-4">
      <h1 className="text-2xl font-bold text-center">Image Generator</h1>

      {history.length > 0 && (
        <div className="border rounded p-2">
            <h2 className="font-semibold text-lg mb-2">🕘 History</h2>
            <div className="space-y-2 max-h-96 overflow-y-auto">
            {history.map((entry, idx) => (
                <button
                key={idx}
                onClick={() => {
                    setPrompt(entry.prompt)
                    setSize(entry.settings.size)
                    setQuality(entry.settings.quality)
                    setFormat(entry.settings.format)
                    setBackground(entry.settings.background)
                    setModeration(entry.settings.moderation)
                    setCount(entry.settings.count)
                    setImages(
                    entry.images.map((b64: string) => ({ b64, prompt: entry.prompt }))
                    )
                    setCurrentIndex(0)
                    setLocked(true)
                }}
                className="block w-full text-left p-2 bg-gray-100 rounded hover:bg-gray-200"
                >
                <div className="font-medium">{entry.prompt.slice(0, 80)}</div>
                <div className="text-xs text-gray-600">{new Date(entry.timestamp).toLocaleString()}</div>
                </button>
            ))}
            </div>
        </div>
        )}

      <textarea
        className="w-full border p-2 rounded"
        rows={4}
        placeholder="Describe your image..."
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
        disabled={locked || loading}
      />

      <input
        type="file"
        accept="image/*"
        multiple
        onChange={handleFilesChange}
        className="w-full p-2 border rounded"
        disabled={locked || loading}
      />

      {imageFiles.length > 0 && (
        <div className="grid grid-cols-2 gap-2">
          {imageFiles.map((file, i) => (
            <div key={file.name} className="relative">
              <img
                src={URL.createObjectURL(file)}
                alt={file.name}
                className="w-full h-auto rounded border object-cover max-h-40"
              />
              <button
                onClick={() => removeFile(i)}
                className="absolute top-1 right-1 text-xs bg-white bg-opacity-75 px-2 py-1 rounded text-red-500"
                disabled={locked || loading}
              >
                ✕
              </button>
            </div>
          ))}
        </div>
      )}

      {images.length > 0 && (
        <div className="space-y-2 border rounded p-2">
          <img
            src={images[currentIndex].b64}
            alt={`Generated ${currentIndex}`}
            className="w-full rounded"
          />
          <div className="text-xs text-gray-500 mt-1 text-center">
            Prompt: {images[currentIndex].prompt}
          </div>

          <div className="flex justify-between items-center mt-2">
            <button
              onClick={() => setCurrentIndex((i) => Math.max(0, i - 1))}
              disabled={currentIndex === 0}
              className="px-3 py-1 rounded bg-gray-200 disabled:opacity-50"
            >
              ⬅ Prev
            </button>

            <div className="text-sm text-gray-700">
              {currentIndex + 1} / {images.length}
            </div>

            <button
              onClick={() =>
                setCurrentIndex((i) => Math.min(images.length - 1, i + 1))
              }
              disabled={currentIndex === images.length - 1}
              className="px-3 py-1 rounded bg-gray-200 disabled:opacity-50"
            >
              Next ➡
            </button>
          </div>

          <div className="flex justify-center mt-2">
            <button
              onClick={() => {
                const a = document.createElement('a')
                a.href = images[currentIndex].b64
                a.download = `image_${currentIndex}.png`
                a.click()
              }}
              className="bg-blue-600 text-white px-3 py-1 rounded text-sm"
            >
              Download
            </button>
          </div>
        </div>
      )}

      <div className="grid grid-cols-2 gap-2">
        <select
          className="p-2 border rounded"
          value={format}
          onChange={(e) => setFormat(e.target.value)}
          disabled={locked || loading || imageFiles.length > 0}
        >
          {FORMATS.map((f) => (
            <option key={f} value={f}>
              Format: {f}
            </option>
          ))}
        </select>

        <select
          className="p-2 border rounded"
          value={background}
          onChange={(e) => setBackground(e.target.value)}
          disabled={locked || loading || imageFiles.length > 0}
        >
          {BACKGROUNDS.map((b) => (
            <option key={b} value={b}>
              Background: {b}
            </option>
          ))}
        </select>

        <select
          className="p-2 border rounded"
          value={size}
          onChange={(e) => setSize(e.target.value)}
          disabled={locked || loading}
        >
          {SIZES.map((s) => (
            <option key={s} value={s}>
              Size: {s}
            </option>
          ))}
        </select>

        <select
          className="p-2 border rounded"
          value={quality}
          onChange={(e) => setQuality(e.target.value)}
          disabled={locked || loading}
        >
          {QUALITIES.map((q) => (
            <option key={q} value={q}>
              Quality: {q}
            </option>
          ))}
        </select>
      </div>

      <div className="grid grid-cols-2 gap-2">
        <select
          className="p-2 border rounded"
          value={count}
          onChange={(e) => setCount(Number(e.target.value))}
          disabled={locked || loading}
        >
          {COUNTS.map((n) => (
            <option key={n} value={n}>
              Number of images: {n}
            </option>
          ))}
        </select>

        <select
          className="p-2 border rounded"
          value={moderation}
          onChange={(e) => setModeration(e.target.value)}
          disabled={locked || loading}
        >
          {MODERATIONS.map((m) => (
            <option key={m} value={m}>
              Moderation: {m}
            </option>
          ))}
        </select>
      </div>

      <div className="text-sm text-gray-600 text-center">
        Estimated cost: ~$
        {estimateCost({
          model: 'gpt-image-1',
          size,
          quality,
          n: count,
        }).toFixed(2)}
      </div>

      {locked ? (
        <button
          onClick={reset}
          className="w-full bg-gray-600 text-white p-2 rounded"
        >
          🔁 Reset / New Prompt
        </button>
      ) : (
        <button
          onClick={generate}
          disabled={loading}
          className="w-full bg-blue-600 text-white p-2 rounded disabled:opacity-50"
        >
          {loading
            ? 'Generating...'
            : imageFiles.length
            ? 'Edit Image(s)'
            : 'Generate Image'}
        </button>
      )}
    </div>
  )
}

export default App

================
File: src/App.tsx
================
import { BrowserRouter, Link, Route, Routes } from 'react-router-dom'
import GeneratePage from './pages/GeneratePage'
import HistoryPage from './pages/HistoryPage'

export default function App() {
  return (
    <BrowserRouter>
      <div className="max-w-xl mx-auto p-4">
        <div className="mb-4 flex justify-between items-center">
          <h1 className="text-xl font-bold">🖼 ImageGen</h1>
          <Link to="/history" className="text-blue-600 underline text-sm">
            View History
          </Link>
        </div>

        <Routes>
          <Route path="/" element={<GeneratePage />} />
          <Route path="/history" element={<HistoryPage />} />
        </Routes>
      </div>
    </BrowserRouter>
  )
}

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/HistoryCard.tsx
================
type Props = {
    prompt: string
    timestamp: string
    images: string[]
    onReuse?: () => void
  }
  
  export default function HistoryCard({ prompt, timestamp, images, onReuse }: Props) {
    return (
      <div className="border p-3 rounded space-y-2">
        <div className="font-semibold text-lg">{prompt}</div>
        <div className="text-xs text-gray-500">{new Date(timestamp).toLocaleString()}</div>
  
        <div className="grid grid-cols-2 gap-2">
          {images.map((src, i) => (
            <img
              key={i}
              src={src}
              alt={`Generated ${i}`}
              className="w-full rounded border object-cover max-h-48"
            />
          ))}
        </div>
  
        {onReuse && (
          <div className="text-center">
            <button
            onClick={onReuse}
            className="text-sm bg-gray-600 text-white px-3 py-1 rounded hover:bg-gray-700"
            >
            👁️ View
            </button>
          </div>
        )}
      </div>
    )
  }

================
File: src/components/ImageViewer.tsx
================
type Props = {
  images: { b64: string; prompt: string }[]
  currentIndex: number
  setCurrentIndex: (i: number) => void
}

export default function ImageViewer({ images, currentIndex, setCurrentIndex }: Props) {
  const img = images[currentIndex]

  return (
    <div className="space-y-2 border rounded p-2">
      <img src={img.b64} alt={`Generated ${currentIndex}`} className="w-full rounded" />

      <div className="text-xs text-gray-500 mt-1 text-center">
        Prompt: {img.prompt}
      </div>

      <div className="flex justify-between items-center mt-2">
        <button
          onClick={() => setCurrentIndex((i) => Math.max(0, i - 1))}
          disabled={currentIndex === 0}
          className="px-3 py-1 rounded bg-gray-200 disabled:opacity-50"
        >
          ⬅ Prev
        </button>

        <div className="text-sm text-gray-700">
          {currentIndex + 1} / {images.length}
        </div>

        <button
          onClick={() => setCurrentIndex((i) => Math.min(images.length - 1, i + 1))}
          disabled={currentIndex === images.length - 1}
          className="px-3 py-1 rounded bg-gray-200 disabled:opacity-50"
        >
          Next ➡
        </button>
      </div>

      <div className="flex justify-center mt-2">
        <button
          onClick={() => {
            const a = document.createElement('a')
            a.href = img.b64
            a.download = `image_${currentIndex}.png`
            a.click()
          }}
          className="bg-blue-600 text-white px-3 py-1 rounded text-sm"
        >
          Download
        </button>
      </div>
    </div>
  )
}

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
 
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
 
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
 
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
 
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
 
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
 
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
 
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
 
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
 
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
 
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
 
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
 
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
 
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
 
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
 
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: src/lib/estimateCost.ts
================
export function estimateCost({
    size,
    quality,
    n,
  }: {
    size: string
    quality: string
    n: number
  }): number {
    const baseCosts: Record<string, number> = {
      low: 0.02,
      medium: 0.07,
      high: 0.19,
      auto: 0.07,
    }
  
    const sizeMultiplier =
      size === '1536x1024' || size === '1024x1536' ? 1.5 : 1.0
  
    const costPerImage = baseCosts[quality] || 0.07
  
    return costPerImage * sizeMultiplier * n
  }

================
File: src/lib/utils.ts
================
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/main.tsx
================
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

================
File: src/pages/GeneratePage.tsx
================
import axios from 'axios'
import { useEffect, useState } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import ImageViewer from '../components/ImageViewer'
import { estimateCost } from '../lib/estimateCost'

const FORMATS = ['png', 'jpeg', 'webp']
const SIZES = ['1024x1024', '1536x1024', '1024x1536']
const BACKGROUNDS = ['auto', 'transparent', 'opaque']
const QUALITIES = ['auto', 'low', 'medium', 'high']
const MODERATIONS = ['auto', 'low']
const COUNTS = [1, 2, 3, 4, 5]



type GeneratedImage = {
  b64: string
  prompt: string
}

function GeneratePage() {
  const location = useLocation()
  const navigate = useNavigate()

  const [prompt, setPrompt] = useState('')
  const [format, setFormat] = useState('png')
  const [size, setSize] = useState('1024x1024')
  const [background, setBackground] = useState('auto')
  const [quality, setQuality] = useState('auto')
  const [moderation, setModeration] = useState('auto')
  const [count, setCount] = useState(1)
  const [imageFiles, setImageFiles] = useState<File[]>([])
  const [images, setImages] = useState<GeneratedImage[]>([])
  const [loading, setLoading] = useState(false)
  const [currentIndex, setCurrentIndex] = useState(0)
  const [locked, setLocked] = useState(false)
  const [history, setHistory] = useState<any[]>([])


  useEffect(() => {
    axios.get('/api/history').then((res) => {
      setHistory(res.data.reverse()) // show newest first
    })
  }, [])
  
  const hardReset = () => {
    setPrompt('')
    setFormat('png')
    setSize('1024x1024')
    setBackground('auto')
    setQuality('auto')
    setModeration('auto')
    setCount(1)
    setImages([])
    setImageFiles([])
    setCurrentIndex(0)
    setLocked(false)
  }

  useEffect(() => {
    const state = location.state as any

    if (state?.prompt) {
        setPrompt(state.prompt)
        if (state.settings) {
        setSize(state.settings.size)
        setQuality(state.settings.quality)
        setFormat(state.settings.format)
        setBackground(state.settings.background)
        setModeration(state.settings.moderation)
        setCount(state.settings.count)
        }
        setImages([])
        setImageFiles([])
        setCurrentIndex(0)
        setLocked(state.frozen ?? false)
    } else {
        hardReset()
    }
    }, [location.state])
  
  
  const handleFilesChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newFiles = Array.from(e.target.files || [])
    setImageFiles((prev) => [...prev, ...newFiles])
    e.target.value = ''
  }

  const removeFile = (index: number) => {
    setImageFiles((prev) => prev.filter((_, i) => i !== index))
  }

  const reset = () => {
    setPrompt('')
    setImages([])
    setImageFiles([])
    setCurrentIndex(0)
    setLocked(false)
  }

  const generate = async () => {
    setLoading(true)
    setImages([])

    try {
        let newImages: GeneratedImage[] = []

        if (imageFiles.length > 0) {
        const formData = new FormData()
        formData.append('prompt', prompt)
        formData.append('size', size)
        formData.append('quality', quality)
        formData.append('n', String(count))
        formData.append('moderation', moderation)
        imageFiles.forEach((file) => {
            formData.append('images', file)
        })

        const res = await axios.post('/api/edit', formData, {
            headers: { 'Content-Type': 'multipart/form-data' },
        })

        newImages = res.data.data.map((d: any) => ({
            b64: `data:image/png;base64,${d.b64_json}`,
            prompt,
        }))
        } else {
        const res = await axios.post('/api/generate', {
            prompt,
            model: 'gpt-image-1',
            size,
            output_format: format,
            background,
            quality,
            moderation,
            n: count,
        })

        newImages = res.data.data.map((d: any) => ({
            b64: `data:image/${format};base64,${d.b64_json}`,
            prompt,
        }))
        }

        // Save locally
        setImages(newImages)
        setCurrentIndex(0)
        setLocked(true)

        // Save to history
        await axios.post('/api/history', {
        user: 'lachlan',
        prompt,
        settings: {
            size,
            quality,
            format,
            background,
            moderation,
            count,
        },
        images: newImages.map((img) => img.b64),
        })
    } catch (err) {
        console.error('[Image Generation Error]', err)
        alert('Image generation failed')
    }

    setLoading(false)
    }


  return (
    <div className="max-w-xl mx-auto p-4 space-y-4">
      <h1 className="text-2xl font-bold text-center">Image Generator</h1>

      {locked && (
        <div className="flex justify-center">
        <button
        onClick={() => {
            navigate('/')
            hardReset()
        }}
        className="w-full bg-gray-600 text-white p-2 rounded"
        >
        🔁 Reset / New Prompt
        </button>
        </div>
        )}


      <textarea
        className="w-full border p-2 rounded"
        rows={4}
        placeholder="Describe your image..."
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
        disabled={locked || loading}
      />

      <input
        type="file"
        accept="image/*"
        multiple
        onChange={handleFilesChange}
        className="w-full p-2 border rounded"
        disabled={locked || loading}
      />

        {images.length > 0 && (
        <ImageViewer
            images={images}
            currentIndex={currentIndex}
            setCurrentIndex={setCurrentIndex}
        />
        )}

      <div className="grid grid-cols-2 gap-2">
        <select
          className="p-2 border rounded"
          value={format}
          onChange={(e) => setFormat(e.target.value)}
          disabled={locked || loading || imageFiles.length > 0}
        >
          {FORMATS.map((f) => (
            <option key={f} value={f}>
              Format: {f}
            </option>
          ))}
        </select>

        <select
          className="p-2 border rounded"
          value={background}
          onChange={(e) => setBackground(e.target.value)}
          disabled={locked || loading || imageFiles.length > 0}
        >
          {BACKGROUNDS.map((b) => (
            <option key={b} value={b}>
              Background: {b}
            </option>
          ))}
        </select>

        <select
          className="p-2 border rounded"
          value={size}
          onChange={(e) => setSize(e.target.value)}
          disabled={locked || loading}
        >
          {SIZES.map((s) => (
            <option key={s} value={s}>
              Size: {s}
            </option>
          ))}
        </select>

        <select
          className="p-2 border rounded"
          value={quality}
          onChange={(e) => setQuality(e.target.value)}
          disabled={locked || loading}
        >
          {QUALITIES.map((q) => (
            <option key={q} value={q}>
              Quality: {q}
            </option>
          ))}
        </select>
      </div>

      <div className="grid grid-cols-2 gap-2">
        <select
          className="p-2 border rounded"
          value={count}
          onChange={(e) => setCount(Number(e.target.value))}
          disabled={locked || loading}
        >
          {COUNTS.map((n) => (
            <option key={n} value={n}>
              Number of images: {n}
            </option>
          ))}
        </select>

        <select
          className="p-2 border rounded"
          value={moderation}
          onChange={(e) => setModeration(e.target.value)}
          disabled={locked || loading}
        >
          {MODERATIONS.map((m) => (
            <option key={m} value={m}>
              Moderation: {m}
            </option>
          ))}
        </select>
      </div>

      <div className="text-sm text-gray-600 text-center">
        Estimated cost: ~$
        {estimateCost({
          model: 'gpt-image-1',
          size,
          quality,
          n: count,
        }).toFixed(2)}
      </div>

      {locked ? (
        <button
          onClick={reset}
          className="w-full bg-gray-600 text-white p-2 rounded"
        >
          🔁 Reset / New Prompt
        </button>
      ) : (
        <button
          onClick={generate}
          disabled={loading}
          className="w-full bg-blue-600 text-white p-2 rounded disabled:opacity-50"
        >
          {loading
            ? 'Generating...'
            : imageFiles.length
            ? 'Edit Image(s)'
            : 'Generate Image'}
        </button>
      )}
    </div>
  )
}

export default GeneratePage

================
File: src/pages/HistoryPage.tsx
================
import axios from 'axios'
import { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import HistoryCard from '../components/HistoryCard'

export default function HistoryPage() {
  const [history, setHistory] = useState<any[]>([])
  const navigate = useNavigate()

  useEffect(() => {
    axios.get('/api/history').then((res) => {
      setHistory(res.data.reverse())
    })
  }, [])

  return (
    <div className="space-y-4 max-w-xl mx-auto p-4">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">📜 History</h2>
        <button
          onClick={() => navigate('/')}
          className="text-sm bg-gray-700 text-white px-3 py-1 rounded hover:bg-gray-800"
        >
          + New Prompt
        </button>
      </div>

      {history.length === 0 ? (
        <div className="text-center text-gray-500">No history found.</div>
      ) : (
        history.map((entry, idx) => (
          <HistoryCard
            key={idx}
            prompt={entry.prompt}
            timestamp={entry.timestamp}
            images={entry.images}
            onReuse={() =>
              navigate('/', {
                state: {
                  prompt: entry.prompt,
                  settings: entry.settings,
                  frozen: true,
                },
              })
            }
          />
        ))
      )}
    </div>
  )
}

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    }
  },
  "include": [
    "src"
  ],
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import react from "@vitejs/plugin-react";
import path from "path";
import { defineConfig } from "vite";

// https://vitejs.dev/config/
export default defineConfig({
  server: {
        proxy: {
          '/api': 'http://localhost:3001',
        },
  },
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
});



================================================================
End of Codebase
================================================================
